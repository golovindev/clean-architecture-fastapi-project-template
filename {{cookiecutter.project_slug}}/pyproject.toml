[project]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
requires-python = ">={{ cookiecutter.python_version }}"
dependencies = [
    "alembic==1.17.1",
{% if cookiecutter.use_cache == "redis" %}    "redis==5.0.0",{% endif %}
{% if cookiecutter.use_cache == "keydb" %}    "redis==5.0.0",{% endif %}
{% if cookiecutter.use_cache == "tarantool" %}    "tarantool==2.8.0",{% endif %}
{% if cookiecutter.use_cache == "dragonfly" %}    "redis==5.0.0",{% endif %}
    "dishka==1.7.2",
    "fastapi==0.117.1",
{% if cookiecutter.use_broker == "kafka" %}    "faststream[kafka]==0.5.48",{% endif %}
{% if cookiecutter.use_broker == "rabbitmq" %}    "faststream[rabbit]==0.5.48",{% endif %}
{% if cookiecutter.use_broker == "nats" %}    "faststream[nats]==0.5.48",{% endif %}
    "granian==2.5.5",
    "httpx==0.28.1",
{% if cookiecutter.use_database == "postgresql" %}    "asyncpg==0.29.0",{% endif %}
{% if cookiecutter.use_database == "sqlite" %}    "aiosqlite==0.20.0",{% endif %}
{% if cookiecutter.use_database == "mysql" %}    "aiomysql==0.2.0",{% endif %}
    "greenlet==3.0.0",
    "pydantic==2.11.9",
    "pydantic-settings==2.11.0",
    "sqlalchemy==2.0.43",
    "stamina==25.1.0",
    "structlog==24.4.0",
    "watchfiles==1.1.0",
    "uvicorn[standard]==0.24.0",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/{{cookiecutter.project_slug}}"]

[tool.ruff]
# Ruff configuration
target-version = "py{{ cookiecutter.python_version | replace('.', '') }}"
line-length = 88
indent-width = 4

# File discovery
extend-exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]


[tool.ruff.lint]
# Enable comprehensive linting rules
select = [
    "E4",      # pycodestyle errors
    "E7",      # pycodestyle errors
    "E9",      # pycodestyle errors
    "F",       # pyflakes
    "W",       # pycodestyle warnings
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions
    "UP",      # pyupgrade
    "ARG",     # flake8-unused-arguments
    "SIM",     # flake8-simplify
    "TCH",     # flake8-type-checking
    "TID",     # flake8-tidy-imports
    "Q",       # flake8-quotes
    "I",       # isort
    "N",       # pep8-naming
    "D",       # pydocstyle
    "S",       # flake8-bandit
    "A",       # flake8-builtins
    "COM",     # flake8-commas
    "C90",     # mccabe
    "ICN",     # flake8-import-conventions
    "G",       # flake8-logging-format
    "INP",     # flake8-no-pep420
    "PIE",     # flake8-pie
    "T20",     # flake8-print
    "PYI",     # flake8-pyi
    "PT",      # flake8-pytest-style
    "RSE",     # flake8-raise
    "RET",     # flake8-return
    "SLF",     # flake8-self
    "SLOT",    # flake8-slots
    "YTT",     # flake8-2020
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow magic values
    "PLR2004",
    # Allow print statements (useful for debugging)
    "T201",
    # Allow relative imports
    "TID252",
    # Allow star imports in __init__.py
    "F403", "F401",
    # Allow long lines in comments and strings
    "E501",
    # Allow unused imports in __init__.py
    "F401",
    # Conflict with formatter
    "COM812",
    "D101",
    "D102",
    "D103",
    "D104",
    "D106",
    "D107",
    "D100",
    "N818",
    "D105",
    "INP001",
    "D415",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["{{cookiecutter.project_slug}}"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*.py" = [
    "S101",      # Use of `assert` detected
    "PLR2004",   # Magic value used in comparison
    "S108",      # Probable insecure usage of temp file/directory
    "TID252",    # Relative imports are banned
    "D100",      # Missing docstring in public module
    "D101",      # Missing docstring in public class
    "D102",      # Missing docstring in public method
    "D103",      # Missing docstring in public function
    "D104",      # Missing docstring in public package
    "D105",      # Missing docstring in magic method
    "D107",      # Missing docstring in __init__
]

# Allow magic values in example files
"examples/**/*.py" = [
    "PLR2004",   # Magic value used in comparison
    "T201",      # `print` found
    "D100",      # Missing docstring in public module
    "D101",      # Missing docstring in public class
    "D102",      # Missing docstring in public method
    "D103",      # Missing docstring in public function
    "D104",      # Missing docstring in public package
    "D105",      # Missing docstring in magic method
    "D107",      # Missing docstring in __init__
]

# Configuration files can have magic values
"pyproject.toml" = ["PLR2004"]
"setup.py" = ["PLR2004"]
"tox.ini" = ["PLR2004"]
"pytest.ini" = ["PLR2004"]




[tool.mypy]
# Mypy configuration
python_version = "{{ cookiecutter.python_version }}"
strict = false
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = false
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true
ignore_missing_imports = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "examples.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

# Ignore missing imports for optional dependencies
[[tool.mypy.overrides]]
module = [
    "faststream.*",
    "granian.*",
    "structlog.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

# Async configuration
asyncio_mode = "auto"

# Custom markers
markers = [
    "asyncio: mark test as async",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

# Output formatting
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings"
]

# Minimum Python version
minversion = "7.0"

# Filter warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[project.scripts]
{{cookiecutter.project_slug}} = "{{cookiecutter.project_slug}}.main:app"

[dependency-groups]
dev = [
    # Linting and formatting
    "ruff==0.13.1",
    "black==23.12.0",
    "isort==5.12.0",

    # Type checking
    "mypy==1.5.0",
    "types-requests==2.31.0",
    "types-redis==4.6.0",
    "types-setuptools==68.0.0",

    # Testing
    "pytest==8.4.2",
    "pytest-asyncio==0.21.0",
    "pytest-cov==4.1.0",
    "Faker==25.0.0",
    "polyfactory==2.11.0; python_version >= '3.12' and python_version < '4.0'",
]
